#Wed Feb 06 09:48:07 CET 2013
cmdhistory=["(require '[clojure.core.logic.fd \:as fd])" "(run* [q] (in q (fd/interval 1 5)))" "(run* [q] (fd/in q (fd/interval 1 5)))" "(* 2 3 4)" "(java.util.Date. )" "(java.util.Date. getTime)" "(java.util.Date.)" "(getTime java.util.Date.)" "(getTime (java.util.Date.))" "(.getTime (java.util.Date.))" "(/ (.getTime (java.util.Date.)) 1000)" "(int (/ (.getTime (java.util.Date.)) 1000))" "(defn current-date []\\n  (int (/ (.getTime (java.util.Date.)) 1000))\\n  )" "(let [seconds (current-date)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 300 60) (* c 60 60) (* d 5 60) (* e 60)) seconds)\\n\\t      )\\n\\t    )\\n     (\=\= q [a b c d e])\\n\\t  )  \\n  )" "(let [seconds (current-date)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 300 60) (* c 60 60) (* d 5 60) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e])\\n\\t    )\\n\\t  )  \\n  )" "(current-date)" "(+ (* 23 60 60) (* 50 60) 12)" "(current-date)" "(defn current-date []\\n  (+ (* 23 60 60) (* 50 60) 12)\\n  ;(int (/ (.getTime (java.util.Date.)) 1000))\\n  )" "(current-date)" "(defn current-date []\\n  (+ (* 23 60 60) (* 50 60) 12)\\n  ;(int (/ (.getTime (java.util.Date.)) 1000))\\n  )" "(let [seconds (current-date)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 300 60) (* c 60 60) (* d 5 60) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e])\\n\\t    )\\n\\t  )  \\n  )" "(run* [q]\\n   (fresh [x y]\\n     (fd/in x (fd/interval 0 1))\\n\\t\\t (fd/in y (fd/interval 0 4))\\n     (\=\= q [x y])\\n     )\\n   )" "(* 300 60 2)" "(let [seconds 36001]\\n\\t(run* [q]\\n\\t   (fresh [x y]\\n\\t     (fd/in x (fd/interval 0 1))\\n\\t\\t\\t (fd/in y (fd/interval 0 4))\\n\\t     (fd/eq\\n\\t       (\= (+ a (* b 300 60)) seconds)\\n\\t       )\\n\\t     (\=\= q [x y])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds 36001]\\n\\t(run* [q]\\n\\t   (fresh [a b]\\n\\t     (fd/in a (fd/interval 0 1))\\n\\t\\t\\t (fd/in b (fd/interval 0 4))\\n\\t     (fd/eq\\n\\t       (\= (+ a (* b 300 60)) seconds)\\n\\t       )\\n\\t     (\=\= q [x y])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds 36001]\\n\\t(run* [q]\\n\\t   (fresh [a b]\\n\\t     (fd/in a (fd/interval 0 1))\\n\\t\\t\\t (fd/in b (fd/interval 0 4))\\n\\t     (fd/eq\\n\\t       (\= (+ a (* b 300 60)) seconds)\\n\\t       )\\n\\t     (\=\= q [a b])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds 36000]\\n\\t(run* [q]\\n\\t   (fresh [a b]\\n\\t     (fd/in a (fd/interval 0 1))\\n\\t\\t\\t (fd/in b (fd/interval 0 4))\\n\\t     (fd/eq\\n\\t       (\= (+ a (* b 300 60)) seconds)\\n\\t       )\\n\\t     (\=\= q [a b])\\n\\t     )\\n\\t   )  \\n  )" "(* 60 60 3)" "(let [seconds 46801]\\n\\t(run* [q]\\n\\t   (fresh [a b]\\n\\t     (fd/in a (fd/interval 0 1))\\n\\t\\t\\t (fd/in b (fd/interval 0 4))\\n\\t     (fd/eq\\n\\t       (\= (+ a (* b 300 60) (* c 60 60) ) seconds)\\n\\t       )\\n\\t     (\=\= q [a b])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds 46801]\\n\\t(run* [q]\\n\\t   (fresh [a b c]\\n\\t     (fd/in a (fd/interval 0 1))\\n\\t\\t\\t (fd/in b (fd/interval 0 4))\\n\\t\\t   (fd/in c (fd/interval 0 4))\\n\\t     (fd/eq\\n\\t       (\= (+ a (* b 300 60) (* c 60 60) ) seconds)\\n\\t       )\\n\\t     (\=\= q [a b])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds 46801]\\n\\t(run* [q]\\n\\t   (fresh [a b c]\\n\\t     (fd/in a (fd/interval 0 1))\\n\\t\\t\\t (fd/in b (fd/interval 0 4))\\n\\t\\t   (fd/in c (fd/interval 0 4))\\n\\t     (fd/eq\\n\\t       (\= (+ a (* b 300 60) (* c 60 60) ) seconds)\\n\\t       )\\n\\t     (\=\= q [a b c])\\n\\t     )\\n\\t   )  \\n  )" "(current-date)" "(let [seconds 46801]\\n\\t(run* [q]\\n\\t   (fresh [a b c resto]\\n\\t     (fd/in a (fd/interval 0 1))\\n\\t\\t\\t (fd/in b (fd/interval 0 4))\\n\\t\\t   (fd/in c (fd/interval 0 4))\\n\\t     (fd/eq\\n\\t       (\= (+ a (* b 300 60) (* c 60 60) resto) seconds)\\n\\t       )\\n\\t     (\=\= q [a b c])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds 46801]\\n\\t(run* [q]\\n\\t   (fresh [a b c resto]\\n\\t     (fd/in a (fd/interval 0 1))\\n\\t\\t\\t (fd/in b (fd/interval 0 4))\\n\\t\\t   (fd/in c (fd/interval 0 4))\\n\\t\\t   (fd/in resto (fd/interval 0 10000))\\n\\t     (fd/eq\\n\\t       (\= (+ a (* b 300 60) (* c 60 60) resto) seconds)\\n\\t       )\\n\\t     (\=\= q [a b c])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds 46801]\\n\\t(run* [q]\\n\\t   (fresh [a b c d e resto]\\n\\t     (fd/in a (fd/interval 0 1))\\n\\t\\t\\t (fd/in b (fd/interval 0 4))\\n\\t\\t   (fd/in c (fd/interval 0 4))\\n \\t\\t   (fd/in d (fd/interval 0 11))\\n\\t\\t   (fd/in e (fd/interval 0 4))\\n\\t\\t   (fd/in resto (fd/interval 0 10000))\\n\\t     (fd/eq\\n\\t       (\= (+ a (* b 300 60) (* c 60 60) (* d 5 60) (* e 60) resto) seconds)\\n\\t       )\\n\\t     (\=\= q [a b c])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds 46801]\\n\\t(run* [q]\\n\\t   (fresh [a b c d e resto]\\n\\t     (fd/in a (fd/interval 0 1))\\n\\t\\t\\t (fd/in b (fd/interval 0 4))\\n\\t\\t   (fd/in c (fd/interval 0 4))\\n \\t\\t   (fd/in d (fd/interval 0 11))\\n\\t\\t   (fd/in e (fd/interval 0 4))\\n\\t\\t   (fd/in resto (fd/interval 0 10000))\\n\\t     (fd/eq\\n\\t       (\= (+ a (* b 300 60) (* c 60 60) (* d 5 60) (* e 60) resto) seconds)\\n\\t       )\\n\\t     (\=\= q [a b c d e resto])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds 46801]\\n\\t(run* [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 24))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t\\t   (fd/in resto (fd/interval 0 10000))\\n\\t     (fd/eq\\n\\t       (\= (+ s (* h 60 60) (* m 60) resto) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s resto])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds (current-date)]\\n\\t(run* [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 24))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t\\t   (fd/in resto (fd/interval 0 10000))\\n\\t     (fd/eq\\n\\t       (\= (+ s (* h 60 60) (* m 60) resto) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s resto])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds (current-date)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 24))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t\\t   (fd/in resto (fd/interval 0 10000))\\n\\t     (fd/eq\\n\\t       (\= (+ s (* h 60 60) (* m 60) resto) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s resto])\\n\\t     )\\n\\t   )  \\n  )" "(let [seconds (current-date)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t\\t   (fd/in resto (fd/interval 0 10000))\\n\\t     (fd/eq\\n\\t       (\= (+ s (* h 60 60) (* m 60) resto) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s resto])\\n\\t     )\\n\\t   )  \\n  )" "(clojure.core/ns berlin-clock.core)\\n(defn current-date []\\n  (+ (* 23 60 60) (* 50 60) 12)\\n  ;(int (/ (.getTime (java.util.Date.)) 1000))\\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-date)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 300 60) (* c 60 60) (* d 5 60) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-date)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t\\t   (fd/in resto (fd/interval 0 10000))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 60 60) (* m 60) s resto) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s resto])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-date)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t\\t   (fd/in resto (fd/interval 0 10))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 60 60) (* m 60) s resto) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s resto])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-date)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t\\t   (fd/in resto (fd/interval 0 10))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 60 60) (* m 60) s resto))\\n\\t       )\\n\\t     (\=\= q [h m s resto])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-date)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t\\t   (fd/in resto (fd/interval 0 10))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 60 60) (* m 60) s) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s resto])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-date)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 60 60) (* m 60) s) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-date)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 300 60) (* c 60 60) (* d 5 60) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-date)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 60 60) (* m 60) s) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(defn current-date []\\n  (int (/ (.getTime (java.util.Date.)) 1000))\\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-date)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 60 60) (* m 60) s) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(current-date)" "(defn current-date []\\n  (int (/ (.getTime (java.util.Date.)) 1000))\\n  )" "(current-date)" "(clojure.core/ns berlin-clock.core)\\n(defn current-date []\\n  (int (/ (.getTime (java.util.Date.)) 1000000))\\n  )\\n(clojure.core/ns user)" "(current-date)" "(int (/ (.getTime (java.util.Date.)) 1000000))" "(clojure.core/ns berlin-clock.core)\\n(defn current-date []\\n  (int (/ (.getTime (java.util.Date.)) 1000000))\\n  )\\n(clojure.core/ns user)" "(defn current-date []\\n  (int (/ (.getTime (java.util.Date.)) 1000000))\\n  )" "(current-date)" "(+ (* 9 60 60) (* 15 60))" "(clojure.core/ns berlin-clock.core)\\n(defn current-date [h m s]\\n  (+ (* h 360) (* m 60) s)\\n  )\\n(clojure.core/ns user)" "(defn current-date [h m s]\\n  (+ (* h 360) (* m 60) s)\\n  )" "(defn current-time [h m s]\\n  (+ (* h 360) (* m 60) s)\\n  )" "(current-time 9 11 12)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 9)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 60 60) (* m 60) s) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(defn current-time [h m s]\\n  (+ (* h 360) (* m 60) s)\\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 9)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 60 60) (* m 60) s) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 9)]\\n\\t(run 5 [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 360) (* m 60) s) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 9)]\\n\\t(run* [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 360) (* m 60) s) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 9)]\\n\\t(run* [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 360) (* m 60) s) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s seconds])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(current-time 13 56 9)" "(current-time 14 50 9)" "14*360" "(* 14 360)" "(* 50 60)" "(* 13 360)" "(* 56 60)" "(+ 4680 3360)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 9)]\\n\\t(run* [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 3600) (* m 60) s) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s seconds])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(defn current-time [h m s]\\n  (+ (* h 3600) (* m 60) s)\\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 9)]\\n\\t(run* [q]\\n\\t   (fresh [h m s resto]\\n\\t     (fd/in h (fd/interval 0 23))\\n\\t\\t\\t (fd/in m (fd/interval 0 59))\\n\\t\\t   (fd/in s (fd/interval 0 59))\\n\\t     (fd/eq\\n\\t       (\= (+ (* h 3600) (* m 60) s) seconds)\\n\\t       )\\n\\t     (\=\= q [h m s seconds])\\n\\t     )\\n\\t   )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 9)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in resto (fd/interval 0 500))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t      )\\n      (\=\= q [a b c d e])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in resto (fd/interval 0 500))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      \\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in resto (fd/interval 0 100))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t      )\\n      (\=\= q [a b c d e])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in resto (fd/interval 0 100))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\nt\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto suma]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in resto (fd/interval 0 100))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n        (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) suma)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto suma]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in e (fd/interval 0 1000000))\\n      (fd/in resto (fd/interval 0 100))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n        (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) suma)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto suma]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in suma (fd/interval 0 1000000))\\n      (fd/in resto (fd/interval 0 100))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n        (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) suma)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto suma]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in suma (fd/interval 0 1000000))\\n      (fd/in resto (fd/interval 0 100))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n        (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) suma)\\n\\t      )\\n      (\=\= q [a b c d e suma seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto suma]\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in suma (fd/interval 0 1000000))\\n      (fd/in resto (fd/interval 0 100))\\n\\t    (fd/eq\\n\\t      (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n        (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60)) suma)\\n\\t      )\\n      (\=\= q [a b c d e suma seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto suma]\\n\\t\\t  (fd/in a (fd/interval 0 60))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in suma (fd/interval 0 1000000))\\n      (fd/in resto (fd/interval 0 100))\\n\\t    (fd/eq\\n\\t      (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n        (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60)) suma)\\n\\t      )\\n      (\=\= q [a b c d e suma seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto suma]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in suma (fd/interval 0 1000000))\\n      (fd/in resto (fd/interval 0 100))\\n\\t    (fd/eq\\n\\t      (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n        (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60)) suma)\\n\\t      )\\n      (\=\= q [a b c d e suma seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto suma]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in suma (fd/interval 0 1000000))\\n      (fd/in resto (fd/interval 0 10))\\n\\t    (fd/eq\\n\\t      (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n        (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60)) suma)\\n\\t      )\\n      (\=\= q [a b c d e suma seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto suma]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in suma (fd/interval 0 1000000))\\n      (fd/in resto (fd/interval 0 1))\\n\\t    (fd/eq\\n\\t      (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n        (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60)) suma)\\n\\t      )\\n      (\=\= q [a b c d e suma seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto suma]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in suma (fd/interval 0 1000000))\\n\\t    (fd/eq\\n\\t      (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t      )\\n      (\=\= q [a b c d e suma seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e suma]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n      (fd/in suma (fd/interval 0 1000000))\\n\\t    (fd/eq\\n\\t      (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t      )\\n      (\=\= q [a b c d e suma seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t      )\\n      (\=\= q [a b c d e suma seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t      )\\n      (\=\= q [a b c d e suma seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ (* a 2) (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 37 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 32 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 8)]\\n\\t(run* [q] \\n\\t  (fresh [a b c d e resto]\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ a (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 8)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e resto]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n        (\= (* a 2) (/ s 2))\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 8)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e resto]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n        ;(\= (* a 2) (/ s 2))\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 8)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e resto]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n        ;(\= (* a 2) (/ s 2))\\n\\t      )\\n      (\=\= q [a b c d e s seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 8)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e resto]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n        (\= resto (/ s 2))\\n\\t      )\\n      (\=\= q [a b c d e resto seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 8)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e resto]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t  (fd/in resto (fd/interval 0 15))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n        (\= resto (/ s 2))\\n\\t      )\\n      (\=\= q [a b c d e resto seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e resto]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t  (fd/in resto (fd/interval 0 15))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n        (\= resto (/ s 2))\\n\\t      )\\n      (\=\= q [a b c d e resto seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 8)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e resto]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t  (fd/in resto (fd/interval 0 15))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n        (\= resto (/ s 2))\\n\\t      )\\n      (\=\= q [a b c d e resto seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 8)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e resto]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t  (fd/in resto (fd/interval 0 15))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n        (\= (* a (/ s 2)) resto)\\n\\t      )\\n      (\=\= q [a b c d e resto seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e resto]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t  (fd/in resto (fd/interval 0 15))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n        (\= (* a (/ s 2)) resto)\\n\\t      )\\n      (\=\= q [a b c d e resto seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e resto]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t  (fd/in resto (fd/interval 0 15))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e resto seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(/ 3 2)" "(unchecked-divide-int 3 2)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e resto]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t  (fd/in resto (fd/interval 0 15))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n        (\= (* a (unchecked-divide-int s 2)) resto)\\n\\t      )\\n      (\=\= q [a b c d e resto seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(defn lampo [s a]\\n  (\=\= s a)\\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (lampo s a)\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (lampo s a)\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(defn lampo [s a]\\n  (\=\= (/ s 2) a)\\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (lampo s a)\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(defn lampo [s a]\\n  (\=\= (* s 2) a)\\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (lampo s a)\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(defn lampo [s a]\\n  (\=\= s a)\\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (lampo s a)\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(defn lampo [s a]\\n  (let [res 12]\\n    (\=\= res a)\\n    )\\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (lampo s a)\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(defn lampo [s a]\\n  (let [res (* 2 s)]\\n    (\=\= res a)\\n    )\\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (lampo s a)\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (project [a s]\\n        (\=\= a (* 2 s))\\n        )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (project [a s]\\n        (\=\= a (+ s s))\\n        )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(run 1 [q]\\n   (fresh [x y]\\n        (\=\= x 1)\\n        (\=\= y 2)\\n        (project [x y]\\n                 (\=\= q (+ x y)))))" "(use 'clojure.core.logic)\\n(require '[clojure.core.logic.fd \:as fd])" "(run 1 [q]\\n   (fresh [x y]\\n        (\=\= x 1)\\n        (\=\= y 2)\\n        (project [x y]\\n                 (\=\= q (+ x y)))))" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= y 5)\\n      (project [x y]\\n        (\=\= x (* 2 y))\\n        )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e y]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= y 5)\\n      (project [x y]\\n        (\=\= x (* 2 y))\\n        )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(clojure.core/ns berlin-clock.core)\\n(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e y x]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= y 5)\\n      (project [x y]\\n        (\=\= x (* 2 y))\\n        )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )\\n(clojure.core/ns user)" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e y x]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= y 5)\\n      (project [x y]\\n        (\=\= x (* 2 y))\\n        )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e y x]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= y 5)\\n      (project [x y]\\n        (\=\= x (* 2 y))\\n        )\\n      (\=\= q [a b c d e x seconds])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e y x]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (project [x y]\\n        (\=\= x (* 2 s))\\n        )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e y x]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [a b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [s b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e x y]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= x 4)\\n      (project [x y]\\n         (\=\= (+ x y) 12)\\n         )\\n      (\=\= q [s b c d e seconds y])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e x y]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= x 4)\\n      (project [x y]\\n         (\= (+ x y) 12)\\n         )\\n      (\=\= q [s b c d e seconds y])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e x y]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= x 4)\\n      (project [x y]\\n         (\= (+ x 5) y)\\n         )\\n      (\=\= q [s b c d e seconds y])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e x y]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= x 4)\\n      (project [x y]\\n         (\=\= (+ x 5) y)\\n         )\\n      (\=\= q [s b c d e seconds y])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e x y]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= x 4)\\n      (project [x y]\\n         (\=\= (+ x 5) a)\\n         )\\n      (\=\= q [s b c d e seconds a])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e x y]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= x 4)\\n      (project [x y]\\n         (\=\= (+ s 5) a)\\n         )\\n      (\=\= q [s b c d e seconds a])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e x y]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= x 4)\\n      (\=\= s y)\\n      (project [x y]\\n         (\=\= (+ y 5) a)\\n         )\\n      (\=\= q [s b c d e seconds a])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e x y]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in a (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= x 4)\\n      (\=\= y s)\\n      (project [x y]\\n         (\=\= (+ y 5) a)\\n         )\\n      (\=\= q [s b c d e seconds a])\\n\\t    )\\n\\t  )  \\n  )" "(let [seconds (current-time 17 38 9)]\\n\\t(run* [q] \\n\\t  (fresh [a s b c d e x y]\\n\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t    (fd/eq\\n\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t      )\\n      (\=\= q [s b c d e seconds])\\n\\t    )\\n\\t  )  \\n  )" "(defn berlin-clock [h m s]\\n  (let [seconds (current-time h m s)]\\n\\t\\t(run* [q] \\n\\t\\t  (fresh [a s b c d e x y]\\n\\t\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t    (fd/eq\\n\\t\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t\\t      )\\n\\t      (\=\= q [s b c d e seconds])\\n\\t\\t    )\\n\\t\\t  )  \\n\\t  )\\n  )" "(berlin-clock 12 22 43)" "(defn berlin-clock [h m s]\\n  (let [seconds (current-time h m s)]\\n\\t\\t(run* [q] \\n\\t\\t  (fresh [a s b c d e x y]\\n\\t\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t    (fd/eq\\n\\t\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t\\t      )\\n\\t      (\=\= q [s b c d e])\\n\\t\\t    )\\n\\t\\t  )  \\n\\t  )\\n  )" "(berlin-clock 12 22 41)" "(first (berlin-clock 12 22 41))" "(first (first (berlin-clock 12 22 41)))" "(+ (first (first (berlin-clock 12 22 41))) 7)" "(defn berlin-reason [h m s]\\n  (let [seconds (current-time h m s)]\\n\\t\\t(run* [q] \\n\\t\\t  (fresh [a s b c d e x y]\\n\\t\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t    (fd/eq\\n\\t\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t\\t      )\\n\\t      (\=\= q [s b c d e])))))" "(defn berlin-number [[s b c d e]]\\n  (println \\"s\: \\" s)\\n  (println \\"b\: \\" b)\\n  (println \\"c\: \\" c)\\n  (println \\"d\: \\" d)\\n  (println \\"e\: \\" e)  \\n  )" "(defn berlin-clock [h m s] \\n  (berlin-number (first(berlin-reason h m s)))\\n  )" "(berlin-clock 12 34 22)" "(doc iterate)" "(defn berlin-number [[s b c d e]]\\n  (let [rs (repeat (print \\"R\\"))\\n        os  (repeat (print \\"O\\"))\\n        ys (repeat (print \\"Y\\"))])\\n  (println \\"s\: \\" s)\\n  (println \\"b\: \\" b)\\n  (println \\"c\: \\" c)\\n  (println \\"d\: \\" d)\\n  (take e ys)\\n  (take (- 4 e) os)\\n  (println)\\n  )" "(doc iterate)" "(defn berlin-number [[s b c d e]]\\n  (let [rs (repeat (print \\"R\\"))\\n        os  (repeat (print \\"O\\"))\\n        ys (repeat (print \\"Y\\"))]\\n      (println \\"s\: \\" s)\\n\\t\\t  (println \\"b\: \\" b)\\n\\t\\t  (println \\"c\: \\" c)\\n\\t\\t  (println \\"d\: \\" d)\\n\\t\\t  (take e ys)\\n\\t\\t  (take (- 4 e) os)\\n\\t\\t  (println)\\n    )\\n  )" "(berlin-clock 12 32 4)" "(defn berlin-number [[s b c d e]]\\n  (let [rs \#(repeat (print \\"R\\"))\\n        os \#(repeat (print \\"O\\"))\\n        ys \#(repeat (print \\"Y\\"))]\\n      (println \\"s\: \\" s)\\n\\t\\t  (println \\"b\: \\" b)\\n\\t\\t  (println \\"c\: \\" c)\\n\\t\\t  (println \\"d\: \\" d)\\n\\t\\t  (take e ys)\\n\\t\\t  (take (- 4 e) os)\\n\\t\\t  (println)\\n    )\\n  )" "(berlin-clock 12 31 1)" "(take 5 (cycle [\\"a\\" \\"b\\"]))" "(take 5 (cycle [\\"a\\"]))" "(defn berlin-number [[s b c d e]]\\n  (let [rs \#(cycle [\\"a\\"])\\n        os \#(cycle [\\"a\\"])\\n        ys \#(cycle [\\"a\\"])]\\n      (println \\"s\: \\" s)\\n\\t\\t  (println \\"b\: \\" b)\\n\\t\\t  (println \\"c\: \\" c)\\n\\t\\t  (println \\"d\: \\" d)\\n\\t\\t  (print (take e (ys)) )\\n\\t\\t  (print (take (- 4 e) (os)))\\n\\t\\t  (println)\\n    )\\n  )" "(berlin-clock 10 23 1)" "(defn berlin-number [[s b c d e]]\\n  (let [rs \#(cycle [\\"R\\"])\\n        os \#(cycle [\\"O\\"])\\n        ys \#(cycle [\\"Y\\"])]\\n      (println \\"s\: \\" s)\\n\\t\\t  (println \\"b\: \\" b)\\n\\t\\t  (println \\"c\: \\" c)\\n\\t\\t  (println \\"d\: \\" d)\\n\\t\\t  (print (take e (ys)) )\\n\\t\\t  (print (take (- 4 e) (os)))\\n\\t\\t  (println)\\n    )\\n  )" "(berlin-clock 8 12 9)" "(defn berlin-number [[s b c d e]]\\n  (let [rs \#(cycle [\\"R\\"])\\n        os \#(cycle [\\"O\\"])\\n        ys \#(cycle [\\"Y\\"])]\\n      (println \\"s\: \\" s)\\n\\t\\t  (println \\"b\: \\" b)\\n\\t\\t  (println \\"c\: \\" c)\\n\\t\\t  (println \\"d\: \\" d)\\n\\t\\t  (concat (take e (ys)) (take (- 4 e) (os)))\\n\\t\\t  (println)\\n    )\\n  )" "(berlin-clock 10 4 2)" "(defn berlin-number [[s b c d e]]\\n  (let [rs \#(cycle [\\"R\\"])\\n        os \#(cycle [\\"O\\"])\\n        ys \#(cycle [\\"Y\\"])]\\n      (println \\"s\: \\" s)\\n\\t\\t  (println \\"b\: \\" b)\\n\\t\\t  (println \\"c\: \\" c)\\n\\t\\t  (println \\"d\: \\" d)\\n\\t\\t  (print (concat (take e (ys)) (take (- 4 e) (os))) )\\n\\t\\t  (println)\\n    )\\n  )" "(berlin-clock 12 3 1)" "(defn berlin-number [[s b c d e]]\\n  (let [rs \#(cycle [\\"R\\"])\\n        os \#(cycle [\\"O\\"])\\n        ys \#(cycle [\\"Y\\"])]\\n      (println \\"s\: \\" s)\\n      (print (concat (take b (ys)) (take (- 4 b) (os))) )\\n      (print (concat (take c (ys)) (take (- 4 c) (os))) )\\n\\t\\t  (print (concat (take d (ys)) (take (- 11 d) (os))) )    \\n\\t\\t  (print (concat (take e (ys)) (take (- 4 e) (os))) )\\n\\t\\t  (println)\\n    )\\n  )" "(berlin-clock 13 17 42)" "(defn berlinize [n max]\\n  (let [rs \#(cycle [\\"R\\"])\\n      os \#(cycle [\\"O\\"])\\n      ys \#(cycle [\\"Y\\"])]\\n    (concat (take n (ys)) (take (- max n) (os)))\\n    )\\n  )" "(defn berlin-number [[s b c d e]]\\n  (let [rs \#(cycle [\\"R\\"])\\n        os \#(cycle [\\"O\\"])\\n        ys \#(cycle [\\"Y\\"])]\\n      (println \\"s\: \\" s)\\n      (print (berlinize b 4))\\n      (print (concat (take c (ys)) (take (- 4 c) (os))) )\\n\\t\\t  (print (concat (take d (ys)) (take (- 11 d) (os))) )    \\n\\t\\t  (print (concat (take e (ys)) (take (- 4 e) (os))) )\\n\\t\\t  (println)\\n    )\\n  )" "(berlin-clock 17 32 9)" "(defn berlin-number [[s b c d e]]\\n  (let [rs \#(cycle [\\"R\\"])\\n        os \#(cycle [\\"O\\"])\\n        ys \#(cycle [\\"Y\\"])]\\n      (println \\"s\: \\" s)\\n      (print (berlinize b 4))\\n      (print (berlinize c 4))\\n      (print (berlinize d 11))\\n      (print (berlinize e 4))\\n\\t\\t  (println)\\n    )\\n  )" "(berlin-clock 17 32 9)" "(defn berlin-number [time]\\n    (partition 2 (interleave time [60 4 4 11 4]))\\n  \\n  \\n    ;(println \\"s\: \\" s)\\n    ;(print (berlinize b 4))\\n    ;(print (berlinize c 4))\\n    ;(print (berlinize d 11))\\n    ;(print (berlinize e 4))\\n\\t  ;(println)\\n  )" "(berlin-clock 17 32 9)" "\\n(+ 2 2)" "(defn berlin-number [time]\\n    (map berlinize (partition 2 (interleave time [60 4 4 11 4])))\\n  \\n  \\n    ;(println \\"s\: \\" s)\\n    ;(print (berlinize b 4))\\n    ;(print (berlinize c 4))\\n    ;(print (berlinize d 11))\\n    ;(print (berlinize e 4))\\n\\t  ;(println)\\n  )" "(berlin-clock 17 32 9)" "(defn berlinize [[n max]]\\n  (let [rs \#(cycle [\\"R\\"])\\n      os \#(cycle [\\"O\\"])\\n      ys \#(cycle [\\"Y\\"])]\\n    (concat (take n (ys)) (take (- max n) (os)))\\n    )\\n  )" "(berlin-clock 17 32 9)" "(defn berlin-number [time]\\n    (drop 1 (map berlinize (partition 2 (interleave time [60 4 4 11 4])))))" "(berlin-clock 17 32 9)" "(berlin-clock 17 35 9)" "(replicate 4 \\"Y\\")" "(defn berlinize [[n max]]\\n    (concat (replicate n \\"Y\\") (replicate (- max n) \\"O\\")))" "(defn berlin-number [time]\\n    (drop 1 (map berlinize (partition 2 (interleave time [60 4 4 11 4])))))" "(berlin-clock 17 32 9)" "(berlin-clock 17 35 9)" "(berlin-clock 5 23 1)" "(berlin-reason 5 23 1)" "(berlin-reason 5 23 18)" "(defn berlin-reason [h m s]\\n  (let [seconds (current-time h m s)]\\n\\t\\t(run* [q] \\n\\t\\t  (fresh [a s b c d e resto]\\n\\t\\t\\t  (fd/in a (fd/interval 0 1))\\n\\t\\t\\t  (fd/in resto (fd/interval 0 59))\\n\\t\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t    (fd/eq\\n\\t\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t\\t      )\\n\\t      (\=\= q [s b c d e])))))" "(berlin-reason 5 23 18)" "(defn berlin-reason [h m s]\\n  (let [seconds (current-time h m s)]\\n\\t\\t(run* [q] \\n\\t\\t  (fresh [a s b c d e resto]\\n\\t\\t\\t  (fd/in s (fd/interval 0 1))\\n\\t\\t\\t  (fd/in resto (fd/interval 0 59))\\n\\t\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t    (fd/eq\\n\\t\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t\\t      )\\n\\t      (\=\= q [s b c d e])))))" "(berlin-reason 5 23 18)" "(defn berlin-reason [h m s]\\n  (let [seconds (current-time h m s)]\\n\\t\\t(run* [q] \\n\\t\\t  (fresh [a s b c d e resto]\\n\\t\\t\\t  (fd/in s (fd/interval 0 1))\\n\\t\\t\\t  (fd/in resto (fd/interval 0 59))\\n\\t\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t    (fd/eq\\n\\t\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t\\t      )\\n\\t      (\=\= q [s b c d e resto])))))" "(berlin-reason 5 23 18)" "(defn berlin-reason [h m s]\\n  (let [seconds (current-time h m s)]\\n\\t\\t(run* [q] \\n\\t\\t  (fresh [a s b c d e resto]\\n\\t\\t\\t  (fd/in s (fd/interval 0 1))\\n\\t\\t\\t  (fd/in resto (fd/interval 0 59))\\n\\t\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t    (fd/eq\\n\\t\\t      (\= (+ (* s 2) (* b 18000) (* c 3600) (* d 300) (* e 60) resto) seconds)\\n\\t\\t      )\\n\\t      (\=\= q [s b c d e resto])))))" "(berlin-reason 5 23 18)" " \#(compare (last %1) (last %2) (berlin-reason 5 23 18))" "\#(compare (last %1) (last %2) (berlin-reason 5 23 18))" "(sort \#(compare (last %1) (last %2)) (berlin-reason 5 23 18))" "(sort \#(< (last %1) (last %2)) (berlin-reason 5 23 18))" "(sort \#(> (last %1) (last %2)) (berlin-reason 5 23 18))" "(first (berlin-reason 5 23 18))" "(defn berlinize [[n max]]\\n    (concat (replicate n \\"Y\\") (replicate (- max n) \\"O\\")))" "(first (first (berlin-reason 5 23 18)))" "(defn berlin-reason [h m s]\\n  (let [seconds (current-time h m s)]\\n\\t\\t(run* [q] \\n\\t\\t  (fresh [a s b c d e]\\n\\t\\t\\t  (fd/in s (fd/interval 0 1))\\n\\t\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t    (fd/eq\\n\\t\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t\\t      )\\n\\t      (\=\= q [s b c d e resto])))))" "(first (first (berlin-reason 5 23 18)))" "(first (berlin-reason 5 23 18))" "(defn berlin-reason [h m s]\\n  (let [seconds (current-time h m s)]\\n\\t\\t(run* [q] \\n\\t\\t  (fresh [a s b c d e]\\n\\t\\t\\t  (fd/in s (fd/interval 0 1))\\n\\t\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t    (fd/eq\\n\\t\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t\\t      )\\n\\t      (\=\= q [s b c d e])))))" "(first (berlin-reason 5 23 18))" "(defn berlin-reason [h m s]\\n  (let [seconds (current-time h m s)]\\n\\t\\t(run* [q] \\n\\t\\t  (fresh [a s b c d e]\\n\\t\\t\\t  (fd/in s (fd/interval 0 59))\\n\\t\\t\\t  (fd/in b (fd/interval 0 4))\\n\\t\\t\\t  (fd/in c (fd/interval 0 4))\\n\\t\\t\\t  (fd/in d (fd/interval 0 11))\\n\\t\\t\\t  (fd/in e (fd/interval 0 4))\\n\\t\\t    (fd/eq\\n\\t\\t      (\= (+ s (* b 18000) (* c 3600) (* d 300) (* e 60)) seconds)\\n\\t\\t      )\\n\\t      (\=\= q [s b c d e])))))" "(first (berlin-reason 5 23 18))" "(first (first (berlin-reason 5 23 18)))" "(defn berlinize [[n max]]\\n    (concat (replicate n \\"Y\\") (replicate (- max n) \\"O\\")))" "(/ 2 (first (first (berlin-reason 5 23 18))))" "(/ (first (first (berlin-reason 5 23 18))) )" "(/ (first (first (berlin-reason 5 23 18))) 2)" "(div (first (first (berlin-reason 5 23 18))) 2)" "(unchecked-divide-int (first (first (berlin-reason 5 23 18))) 2)" "(unchecked-divide-int (first (first (berlin-reason 5 23 17))) 2)" "(unchecked-divide-int (first (first (berlin-reason 5 23 18))) 2)" "(unchecked-divide-int (first (first (berlin-reason 5 23 19))) 2)" "(defn berlinize [[n max]]\\n    (concat (replicate n \\"Y\\") (replicate (- max n) \\"O\\")))" "(mod (unchecked-divide-int (first (first (berlin-reason 5 23 19))) 2) 2)" "(mod (unchecked-divide-int (first (first (berlin-reason 5 23 20))) 2) 2)" "(mod (unchecked-divide-int (first (first (berlin-reason 5 23 21))) 2) 2)" "(mod (unchecked-divide-int (first (first (berlin-reason 5 23 22))) 2) 2)" "(-> (berlin-reason 5 23 22) (first) (first))" "(-> (berlin-reason 5 23 22) (first) (first) (unchecked-divide-int 2))" "(-> (berlin-reason 5 23 22) (first) (first) (unchecked-divide-int 2) (mod 2))" "(defn alter-seconds [reasoning]\\n  (-> reasoning (first) (first) (unchecked-divide-int 2) (mod 2))\\n  )" "(alter-seconds (berlin-reason 5 23 18))" "(alter-seconds (berlin-reason 5 23 21))" "(defn alter-seconds [reasoning]\\n  (assoc reasoning 0 (-> reasoning (first) (first) (unchecked-divide-int 2) (mod 2)))\\n  )" "(alter-seconds (berlin-reason 5 23 21))" "(defn alter-seconds [reasoning]\\n  (assoc (vector reasoning) 0 (-> reasoning (first) (first) (unchecked-divide-int 2) (mod 2)))\\n  )" "c" "(defn alter-seconds [reasoning]\\n  (assoc (sequence reasoning) 0 (-> reasoning (first) (first) (unchecked-divide-int 2) (mod 2)))\\n  )" "(alter-seconds (berlin-reason 5 23 21))" "(defn alter-seconds [reasoning]\\n  (assoc (vec reasoning) 0 (-> reasoning (first) (first) (unchecked-divide-int 2) (mod 2)))\\n  )" "(alter-seconds (berlin-reason 5 23 21))" "(vec (berlin-reason 5 23 18))" "(vec (first (berlin-reason 5 23 18)))" "(defn alter-seconds [reasoning]\\n  (assoc (vec reasoning) 0 (-> reasoning (first) (unchecked-divide-int 2) (mod 2)))\\n  )" "(alter-seconds (first (berlin-reason 5 23 21)))" "(defn berlin-clock [h m s] \\n  (berlin-number (alter-seconds (first (berlin-reason h m s)))))" "(berlin-clock 12 32 4)" "(defn berlin-number [time]\\n    (map berlinize (partition 2 (interleave time [1 4 4 11 4]))))" "(defn berlin-clock [h m s] \\n  (berlin-number (alter-seconds (first (berlin-reason h m s)))))" "(berlin-clock 12 34 2)" "(berlin-clock 12 34 3)" "(berlin-clock 12 34 4)" "(defn alter-seconds [reasoning]\\n  (assoc (vec reasoning) 0 (-> reasoning (first) (unchecked-divide-int 2) (mod 2))))" "(berlin-clock 13 2 3)" "(defn alter-seconds [reasoning]\\n  (assoc reasoning 0 (-> reasoning (first) (unchecked-divide-int 2) (mod 2))))" "(berlin-clock 13 2 3)" "(defn berlinize [[n max color]]\\n    (concat (replicate n color) (replicate (- max n) \\"O\\")))" "(defn berlin-number [time]\\n    (map berlinize (partition 3 (interleave time [1 4 4 11 4] [\\"Y\\" \\"R\\" \\"R\\" \\"Y\\" \\"Y\\"]))))" "(defn berlin-clock [h m s] \\n  (berlin-number (alter-seconds (first (berlin-reason h m s)))))" "(berlin-clock 12 32 1)" "(berlin-clock 12 32 3)"]
eclipse.preferences.version=1
